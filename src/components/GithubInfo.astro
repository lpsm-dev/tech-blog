---
// Import necessary components and utilities
import { Icon } from "astro-icon/components";
const { url } = Astro.props;
---

<github-info class="github-card" data-url={url}>
  <div class="card-header">
    <div class="repo-info">
      <h3 class="repo-name">
        <span>
          <span class="loading loading-spinner loading-xs"></span>
        </span>
      </h3>
      <p class="repo-description">
        <span class="loading loading-spinner loading-xs"></span>
      </p>
      <div class="repo-language">
        <p>
          <Icon name="ri:code-line" class="icon" />
          Linguagem:
          <span>
            <span class="loading loading-spinner loading-xs"></span>
          </span>
        </p>
      </div>
    </div>
  </div>

  <div class="card-stats">
    <div class="stat-item">
      <Icon name="ri:star-line" class="icon" />
      <span class="stat-value">
        <span class="loading loading-spinner loading-xs"></span>
      </span>
    </div>
    <div class="stat-item">
      <Icon name="ri:git-fork-line" class="icon" />
      <span class="stat-value">
        <span class="loading loading-spinner loading-xs"></span>
      </span>
    </div>
  </div>

  <a href={url} target="_blank" rel="noopener noreferrer" class="github-button">
    <Icon name="ri:github-fill" class="button-icon" />
    Olhe no GitHub
  </a>
</github-info>

<script>
  import { formatNumber } from "../utils/format";
  import { getRepoInfoFromUrl } from "../utils/github";

  class GithubInfo extends HTMLElement {
    connectedCallback() {
      const repoUrl = this.dataset.url;
      if (!repoUrl) return;

      const { owner, repo } = getRepoInfoFromUrl(repoUrl);
      const apiUrl = `https://api.github.com/repos/${owner}/${repo}`;

      fetch(apiUrl)
        .then((response) => {
          if (!response.ok) throw new Error("Failed to fetch repository info.");
          return response.json();
        })
        .then((data) => {
          this.querySelector(".repo-name span")!.textContent = data.name;
          this.querySelector(".repo-description span")!.textContent =
            data.description || "No description provided.";
          this.querySelector(".repo-language span")!.textContent =
            data.language || "N/A";
          this.querySelectorAll(".stat-value").forEach((span, index) => {
            span.textContent = formatNumber(
              index === 0 ? data.stargazers_count : data.forks_count,
            );
          });
        })
        .catch((error) => {
          console.error("Error fetching repository info:", error);
        });
    }
  }

  customElements.define("github-info", GithubInfo);
</script>

<style>
  .github-card {
    display: flex;
    flex-direction: column;
    position: relative;
    border-radius: 20px;
    background: rgb(var(--card-bg));
    box-shadow:
      0 4px 6px -1px rgba(0, 0, 0, 0.05),
      0 2px 4px -1px rgba(0, 0, 0, 0.03);
    overflow: hidden;
    padding: 1.5rem;
    text-decoration: none;
    color: inherit;
  }

  .repo-name {
    color: rgb(var(--black)) !important;
  }

  .repo-description {
    color: rgb(var(--gray)) !important;
    margin-top: 0.5rem;
  }

  .repo-language {
    color: rgb(var(--gray)) !important;
    margin-top: 0.5rem;
    display: flex;
    align-items: center;
  }

  .repo-language p {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin: 0;
  }

  .stat-item {
    color: rgb(var(--gray)) !important;
  }

  .stat-value {
    color: rgb(var(--black)) !important;
  }

  .card-header {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .repo-info {
    flex: 1;
  }

  .card-stats {
    display: flex;
    gap: 1.5rem;
    padding-top: 1rem;
    margin-bottom: 1rem;
    border-top: 1px solid rgba(var(--black), 0.06);
  }

  .stat-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .icon {
    width: 1.2rem;
    height: 1.2rem;
    color: rgb(var(--gray));
  }

  .github-button {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    background-color: rgb(var(--accent));
    color: white;
    padding: 0.75rem 1rem;
    border-radius: 8px;
    font-weight: 600;
    text-decoration: none;
    transition: all 0.2s ease;
    margin-top: auto;
    border: none;
    cursor: pointer;
    font-size: 1rem;
    border: 2px solid transparent;
  }

  .github-button:hover {
    background-color: rgb(var(--accent-dark));
    border-color: rgb(var(--accent));
  }

  .button-icon {
    width: 1.2rem;
    height: 1.2rem;
  }

  @media (max-width: 768px) {
    .github-card {
      border-radius: 16px;
      padding: 1.25rem;
    }

    .github-button {
      padding: 0.6rem 0.8rem;
      font-size: 0.9rem;
    }
  }
</style>
